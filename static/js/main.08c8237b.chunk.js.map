{"version":3,"sources":["components/NumberDisplay/NumberDisplay.js","components/Task1/withClickCount.js","components/Task2/Task2.js","components/useClickCount.js","components/Task3/Task3.js","components/Task4/Task4.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["NumberDisplay","number","onClick","className","withClickCount","OriginalComponent","props","increaseByOne","setState","prevState","state","this","Component","Task2","useClickCount","initialState","useState","count","setCount","Task3","Task4","Header","width","height","src","alt","App","ClickCountDisplay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sLASeA,G,YAPO,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,QAAV,OAClB,yBAAKC,UAAU,iBAAiBD,QAASA,GACpCD,K,4BCyBMG,EA1BQ,SAAAC,GAuBnB,OAvBwC,kDAEpC,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,cAAgB,WACZ,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAACR,OAAQQ,EAAUR,OAAS,OANxD,EAAKS,MAAQ,CACTT,OAAQ,GAHG,EAFiB,qDAchC,OACI,kBAACI,EAAD,CACIJ,OAAQU,KAAKD,MAAMT,OACnBC,QAASS,KAAKJ,oBAjBU,GACbK,cCsBhBC,E,kDArBX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IAMVC,cAAgB,WACZ,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAACR,OAAQQ,EAAUR,OAAS,OANxD,EAAKS,MAAQ,CACTT,OAAQ,EAAKK,MAAML,QAHR,E,qDAYf,OACI,kBAAC,EAAD,CACIA,OAAQU,KAAKD,MAAMT,OACnBC,QAASS,KAAKJ,oB,GAhBVK,a,OCMLE,EAPO,SAAAC,GAAiB,IAAD,EACRC,mBAASD,GADD,mBAC3BE,EAD2B,KACpBC,EADoB,KAIlC,MAAO,CAACD,EAFc,kBAAMC,GAAS,SAAAT,GAAS,OAAIA,EAAY,QCUnDU,EAXD,WAAO,IAAD,EACeL,EAAc,GAD7B,mBACTG,EADS,KACFV,EADE,KAGhB,OACI,kBAAC,EAAD,CACIL,QAASK,EACTN,OAAQgB,KCCLG,EARD,SAAC,GAAiB,IAAhBR,EAAe,EAAfA,UAAe,EACIE,EAAc,GADlB,mBACpBG,EADoB,KACbV,EADa,KAG3B,OACI,kBAACK,EAAD,CAAWX,OAAQgB,EAAOf,QAASK,KCY5Bc,EAjBA,WACX,OACI,yBAAKlB,UAAU,UACX,yBAAKA,UAAU,uBACf,iDAGA,yBAAKmB,MAAM,MACNC,OAAO,KACPC,IAAI,sEACJC,IAAI,kBCmCNC,MApCf,WACI,IAAMC,EAAoBvB,EAAeJ,GAEzC,OACI,yBAAKG,UAAU,OACX,kBAAC,EAAD,MAEA,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,QACX,mCACA,kBAACwB,EAAD,OAGJ,yBAAKxB,UAAU,QACX,+CACA,kBAAC,EAAD,CAAOF,OAAQ,KAGnB,yBAAKE,UAAU,QAEX,2CACA,kBAAC,EAAD,OAGJ,yBAAKA,UAAU,QAEX,iDACA,kBAAC,EAAD,CAAOS,UAAWZ,MAI1B,wDC9BQ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.08c8237b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NumberDisplay = ({number, onClick}) => (\n    <div className='number-display' onClick={onClick}>\n        {number}\n    </div>\n);\n\n\nexport default NumberDisplay;","import React, {Component} from \"react\";\n\n// Higher-Order Component\nconst withClickCount = OriginalComponent => {\n    class NewComponent extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                number: 0\n            };\n        }\n\n        increaseByOne = () => {\n            this.setState(prevState => ({number: prevState.number + 1}));\n        }\n\n        render() {\n            return (\n                <OriginalComponent\n                    number={this.state.number}\n                    onClick={this.increaseByOne}\n                />\n            )\n        }\n    }\n\n    return NewComponent;\n}\n\nexport default withClickCount;","import React, {Component} from \"react\";\nimport NumberDisplay from \"../NumberDisplay/NumberDisplay\";\n\n// simple stateful class component\nclass Task2 extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            number: this.props.number\n        };\n    }\n\n    increaseByOne = () => {\n        this.setState(prevState => ({number: prevState.number + 1}));\n    }\n\n    render() {\n        return (\n            <NumberDisplay\n                number={this.state.number}\n                onClick={this.increaseByOne}\n            />\n        )\n    }\n}\n\nexport default Task2;","// implement custom Hook - Task 3\nimport {useState} from \"react\";\n\nconst useClickCount = initialState => {\n    const [count, setCount] = useState(initialState);\n    const increaseByOne = () => setCount(prevState => prevState + 1);\n\n    return [count, increaseByOne];\n}\n\nexport default useClickCount;","import React from \"react\";\nimport useClickCount from \"../useClickCount\";\nimport NumberDisplay from \"../NumberDisplay/NumberDisplay\";\n\nconst Task3 = () => {\n    const [count, increaseByOne] = useClickCount(0);\n\n    return (\n        <NumberDisplay\n            onClick={increaseByOne}\n            number={count}\n        />\n    );\n}\n\nexport default Task3;","import React from \"react\";\nimport useClickCount from \"../useClickCount\";\n\nconst Task4 = ({Component}) => {\n    const [count, increaseByOne] = useClickCount(0);\n\n    return (\n        <Component number={count} onClick={increaseByOne}/>\n    );\n}\n\nexport default Task4;","import React from \"react\";\n\nconst Header = () => {\n    return (\n        <div className='header'>\n            <div className='header-purple-cover'>\n            <h1>React Assignment</h1>\n            </div>\n\n            <img width=\"105\"\n                 height=\"41\"\n                 src=\"https://www.rewire.to/wp-content/uploads/2019/10/db3c3-0_logo-1.png\"\n                 alt=\"rewire logo\"\n            />\n        </div>\n\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './styles/main.css'\n\nimport NumberDisplay from \"./components/NumberDisplay/NumberDisplay\"; // \"build in\" assignment components\nimport withClickCount from \"./components/Task1/withClickCount\"; // Task 1\nimport Task2 from \"./components/Task2/Task2\";\nimport Task3 from \"./components/Task3/Task3\";\nimport Task4 from \"./components/Task4/Task4\";\n\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n    const ClickCountDisplay = withClickCount(NumberDisplay); //also possible to export withClickCount(NumberDisplay) in NumberDisplay.js\n\n    return (\n        <div className=\"App\">\n            <Header/>\n\n            <div className='tasks-container'>\n                <div className='task'>\n                    <h2>HOC</h2>\n                    <ClickCountDisplay/>\n                </div>\n\n                <div className='task'>\n                    <h2>Class Component</h2>\n                    <Task2 number={0}/>\n                </div>\n\n                <div className='task'>\n\n                    <h2>Custom Hook</h2>\n                    <Task3/>\n                </div>\n\n                <div className='task'>\n\n                    <h2>Component as prop</h2>\n                    <Task4 Component={NumberDisplay}/>\n                </div>\n            </div>\n\n            <footer>Made By Adi | 2020</footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}